# This file holds the expected final values of registers after `extended.s`.
#
# Note that for the hash digests, bytes look reversed within the words to match
# OTBN's little-endian representation of bytes.

# Expected SHAKE-128 digest:
# ac161bf2a3b738ab0a5fc441f2c2e7f78ebc34be8dcf0a90c474462fec350053cc7f66d179e4098d100d9b36c7b495f49d8087dfadffa74c42b9262f57a6f86f2f924af53b91f8d0d0981b8653fb5860427cb03e7f38a559f03c50429cf6e724cc233de6cf0168ea53e977e3088fc438dacabf96956ee5b229397e411187d53f29ac6720a8275dd889c758d3214b62a5e28c33806958160caea722159a06a21f525949943ffe44e4bd8a9d8aeee7791fa8952c5ba257311d716ed009e653b51e
w8 = 0x530035ec2f4674c4900acf8dbe34bc8ef7e7c2f241c45f0aab38b7a3f21b16ac
w9 = 0x6ff8a6572f26b9424ca7ffaddf87809df495b4c7369b0d108d09e479d1667fcc
w10 = 0x24e7f69c42503cf059a5387f3eb07c426058fb53861b98d0d0f8913bf54a922f
w11 = 0x3fd58711417e3929b2e56e9596bfcada38c48f08e377e953ea6801cfe63d23cc
w12 = 0x1fa2069a1522a7ae0c16586980338ce2a5624b21d358c789d85d27a82067ac29
w13 = 0x1eb553e609d06e711d3157a25b2c95a81f79e7ee8a9d8abde444fe3f94495952

# Expected SHAKE-256 digest:
# df810c090c18b4f002dd0218f4c6455b2c2a626a889a577096e6dfb3812c0b8cf1f80ac37417e1ec928bbaf935474c5eb4d02fb2341f5834ae1ae7e53a9ccd6d18712756c9319beb2295ef802e990a87d47b310ec6ccf20995908a1714ebbf7da4e54a1ee0e30b59b62157370971650a5ee42681a771db7af5f74606412936cdb020a00e53ee8eeb263bdf8e46d5d19995cb49621c7e4a3fb8a2a0accef5a0eb873c8636a56434c654514b76e049cb37a169a4878e6c5f0f13a38def36612fb0
w14 = 0x8c0b2c81b3dfe69670579a886a622a2c5b45c6f41802dd02f0b4180c090c81df
w15 = 0x6dcd9c3ae5e71aae34581f34b22fd0b45e4c4735f9ba8b92ece11774c30af8f1
w16 = 0x7dbfeb14178a909509f2ccc60e317bd4870a992e80ef9522eb9b31c956277118
w17 = 0xcd3629410646f7f57adb71a78126e45e0a657109375721b6590be3e01e4ae5a4
w18 = 0xeba0f5ceaca0a2b83f4a7e1c6249cb9599d1d5468edf3b26eb8eee530ea020b0
w19 = 0xb02f6136ef8da3130f5f6c8e87a469a137cb49e0764b5154c63464a536863c87

# Expected results for vectorized instructions. Can be recalculated using the
# following Python program:
#
# def bn(v, n):
#   out = 0
#   for term in reversed(v):
#     out <<= n
#     out += term
#   return out
#
# def vec(x, n):
#   return [(x >> (n*i)) & ((1 << n) - 1) for i in range(int(256 / n))]
#
# x = 0x00001111022203330444055506660777088809990aaa0bbb0ccc01dd01ee01ff
# y = 0x00008801001199020022aa030033bb040044cc050055dd060066ee070077ff08
# q16 = 0xd01
# q32 = 0x7fe001
# vx = vec(x, 16)
# vy = vec(y, 32)
#
# va = [(5 * x) % q16 for x in vx]
# vb = [(0 - x) for x in vx]
# vc = [(x * x) % q16 for x in vx]
# vd = [(5 * y) % q32 for y in vy]
# ve = [(0 - y) % q32 for y in vy]
# vf = [(y * y) % q32 for y in vy]
# print(f'w20 = {bn(va,16):#066x}')
# print(f'w21 = {bn(vb,16):#066x}')
# print(f'w22 = {bn(vc,16):#066x}')
# print(f'w23 = {bn(vd,32):#066x}')
# print(f'w24 = {bn(ve,32):#066x}')
# print(f'w25 = {bn(vf,32):#066x}')
#
# vg = [(x >> 4) for x in vx]
# vh = [(x << 4) & ((1 << 16) - 1) for x in vx]
# vj = [(y >> 12) for y in vy]
# vk = [(y << 12) & ((1 << 32) - 1) for y in vy]
#
# print(f'w26 = {bn(vg,16):#066x}')
# print(f'w27 = {bn(vh,16):#066x}')
# print(f'w28 = {bn(vj,32):#066x}')
# print(f'w29 = {bn(vk,32):#066x}')

# Vectorized 16-bit addition result (a)
w20 = 0x000005550aaa02fe085300a705fc0b5103a508fa014e06a30bf8095109a609fb
# Vectorized 16-bit subtraction result (b)
w21 = 0x00000bf00adf09ce08bd07ac069b058a047903680257014600350b240b130b02
# Vectorized 16-bit multiplication result (c)
w22 = 0x0000050b072b066002aa090a0c7f00080aa8055c0a260c050af9048503fb05b3
# Vectorized 32-bit addition result (d)
w23 = 0x0002a8050057fd0a002d720e0002e71200583c17002db11b0003261f00587b24
# Vectorized 32-bit subtraction result (e)
w24 = 0x007f5800006e46ff005d35fe004c24fd003b13fc002a02fb0018f1fa0007e0f9
# Vectorized 32-bit multiplication result (f)
w25 = 0x00530f710033b80e005c167d004c4abd000454ce000414b1004b8a66005ad5ec
# Vectorized 16-bit right shift result (g)
w26 = 0x000000110022003300440055006600770088009900aa00bb00cc001d001e001f
# Vectorized 16-bit left shift result (h)
w27 = 0x0000111022203330444055506660777088809990aaa0bbb0ccc01dd01ee01ff0
# Vectorized 32-bit right shift result (j)
w28 = 0x00000008000001190000022a0000033b0000044c0000055d0000066e0000077f
# Vectorized 32-bit left shift result (k)
w29 = 0x08801000199020002aa030003bb040004cc050005dd060006ee070007ff08000
